// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.3
// source: prime.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrimeCalculatorClient is the client API for PrimeCalculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimeCalculatorClient interface {
	//Sends a true false if the number is prime or not
	IsItPrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (*PrimeReply, error)
}

type primeCalculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimeCalculatorClient(cc grpc.ClientConnInterface) PrimeCalculatorClient {
	return &primeCalculatorClient{cc}
}

func (c *primeCalculatorClient) IsItPrime(ctx context.Context, in *PrimeRequest, opts ...grpc.CallOption) (*PrimeReply, error) {
	out := new(PrimeReply)
	err := c.cc.Invoke(ctx, "/prime.PrimeCalculator/IsItPrime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimeCalculatorServer is the server API for PrimeCalculator service.
// All implementations must embed UnimplementedPrimeCalculatorServer
// for forward compatibility
type PrimeCalculatorServer interface {
	//Sends a true false if the number is prime or not
	IsItPrime(context.Context, *PrimeRequest) (*PrimeReply, error)
	mustEmbedUnimplementedPrimeCalculatorServer()
}

// UnimplementedPrimeCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedPrimeCalculatorServer struct {
}

func (UnimplementedPrimeCalculatorServer) IsItPrime(context.Context, *PrimeRequest) (*PrimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsItPrime not implemented")
}
func (UnimplementedPrimeCalculatorServer) mustEmbedUnimplementedPrimeCalculatorServer() {}

// UnsafePrimeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimeCalculatorServer will
// result in compilation errors.
type UnsafePrimeCalculatorServer interface {
	mustEmbedUnimplementedPrimeCalculatorServer()
}

func RegisterPrimeCalculatorServer(s grpc.ServiceRegistrar, srv PrimeCalculatorServer) {
	s.RegisterService(&PrimeCalculator_ServiceDesc, srv)
}

func _PrimeCalculator_IsItPrime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimeCalculatorServer).IsItPrime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prime.PrimeCalculator/IsItPrime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimeCalculatorServer).IsItPrime(ctx, req.(*PrimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimeCalculator_ServiceDesc is the grpc.ServiceDesc for PrimeCalculator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimeCalculator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prime.PrimeCalculator",
	HandlerType: (*PrimeCalculatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsItPrime",
			Handler:    _PrimeCalculator_IsItPrime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prime.proto",
}
